name: Build Android App via API

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'The branch, tag or SHA to checkout.'
        required: true
        default: 'main'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up the correct Java Development Kit version (JDK 21)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # 3. Set up the correct Node.js version (Node 20)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 4. Install project dependencies
      - name: Install Dependencies
        run: npm install

      # 5. Sync the web assets with the native project
      - name: Sync Capacitor Project
        run: npx cap sync android

      # 6. Make the Gradle wrapper executable
      - name: Make gradlew executable
        run: chmod +x ./android/gradlew

      # 7. Decode the keystore from the GitHub Secret
      - name: Decode Keystore
        run: echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > android/app/my-release-key.keystore

      # 8. Build a SIGNED APK using the keystore secrets (WITH QUOTES ADDED)
      - name: Build Signed Android Release
        run: |
          ./android/gradlew -p ./android assembleRelease \
            -Pandroid.injected.signing.store.file=$(pwd)/android/app/my-release-key.keystore \
            -Pandroid.injected.signing.store.password='${{ secrets.RELEASE_KEYSTORE_PASSWORD }}' \
            -Pandroid.injected.signing.key.alias='${{ secrets.RELEASE_KEY_ALIAS }}' \
            -Pandroid.injected.signing.key.password='${{ secrets.RELEASE_KEY_PASSWORD }}'

      # 9. Authenticate with Google Cloud using your Firebase service account
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}

      # 10. Upload the final signed APK to your Firebase Storage bucket
      - name: Upload APK to Firebase Storage
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: android/app/build/outputs/apk/release/app-release.apk
          destination: ${{ secrets.FIREBASE_STORAGE_BUCKET }}/latest/app-release.apk

      # 11. (Optional) Upload the signed APK as a GitHub artifact for direct download
      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: android/app/build/outputs/apk/release/app-release.apk
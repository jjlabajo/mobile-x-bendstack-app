# .github/workflows/android-build.yml

name: Build Android App via API

# This allows the workflow to be triggered manually or by an API call
on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'The branch, tag or SHA to checkout.'
        required: true
        default: 'main' # Or your default branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the specified branch of your repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      # 2. Set up JDK (Java Development Kit) which is required for Android builds
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Set up Node.js for npm commands
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Use a version compatible with your project
          cache: 'npm'

      # 4. Install project dependencies
      - name: Install Dependencies
        run: npm install

      # 5. Build the web assets
      - name: Build Web App
        run: npm run build

      # 6. Sync web assets with the native Android project
      - name: Sync Capacitor Project
        run: npx cap sync android

      # 7. Grant execute permission for gradlew
      - name: Make gradlew executable
        run: chmod +x ./android/gradlew

      # 8. Build the Android App (APK or AAB)
      # Use 'assembleRelease' for APK or 'bundleRelease' for AAB
      - name: Build Android Release
        run: ./android/gradlew -p ./android assembleRelease

      # 9. Upload the generated APK as a build artifact
      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: android-release-apk
          path: android/app/build/outputs/apk/release/app-release.apk